{"version":3,"sources":["Components/Nav.js","Page/Home.js","Page/Example.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","react_default","a","createElement","className","reactstrap_es","pills","tag","Link","to","React","Component","Home","fluid","options","chart","type","zoomType","title","text","subtitle","xAxis","enabled","startOnTick","endOnTick","showLastLabel","yAxis","legend","layout","align","verticalAlign","x","y","floating","backgroundColor","Highcharts","theme","legendBackgroundColor","borderWidth","plotOptions","scatter","marker","radius","states","hover","lineColor","tooltip","headerFormat","pointFormat","Example","headers","PlayerStats","statsArr","rowSet","statsJSONArr","forEach","entry","obj","header","index","push","name","color","data","this","convertPlayerStatJSON","series","generateSeries","Teams","length","highcharts_react_official_default","highcharts","App","HashRouter","Nav","Switch","Route","exact","path","component","render","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kitJAgBeA,mLAVX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAKC,OAAK,GACRL,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAASE,IAAKC,IAAMC,GAAG,KAAvB,QACAR,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAASE,IAAKC,IAAMC,GAAG,YAAvB,oBANWC,IAAMC,WCiCZC,mLA/BX,OACEX,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAWQ,OAAK,GACdZ,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAb,2CACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,cAAb,iBACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,cAAb,wCACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,cAAb,6BACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,cAAb,gCAEAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,cAAb,oTACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,cAAb,UACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,cAAb,sGACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,cAAb,oGACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,cAAb,6FACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,cAAb,2EACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,cAAb,0GACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,cAAb,iKAEAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,cAAb,yGACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,cAAb,2BAEAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,cAAb,wCACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,cAAb,wEAzBOO,+DCGfG,EAAU,CACZC,MAAO,CACLC,KAAM,UACNC,SAAU,MAEZC,MAAO,CACLC,KAAM,gCAERC,SAAU,CACRD,KAAM,uBAERE,MAAO,CACLH,MAAO,CACHI,SAAS,EACTH,KAAM,eAEVI,aAAa,EACbC,WAAW,EACXC,eAAe,GAEjBC,MAAO,CACHR,MAAO,CACHC,KAAM,gBAGdQ,OAAQ,CACNC,OAAQ,WACRC,MAAO,OACPC,cAAe,MACfC,EAAG,IACHC,EAAG,GACHC,UAAU,EACVC,gBAAkBC,IAAWC,OAASD,IAAWC,MAAMC,uBAA0B,UACjFC,YAAa,GAEjBC,YAAa,CACTC,QAAS,CACLC,OAAQ,CACJC,OAAQ,EACRC,OAAQ,CACJC,MAAO,CACHtB,SAAS,EACTuB,UAAW,sBAIvBF,OAAQ,CACJC,MAAO,CACHH,OAAQ,CACJnB,SAAS,KAIrBwB,QAAS,CACLC,aAAc,2BACdC,YAAa,iCAuDVC,kMA/CX,IAAIC,EAAUC,EAAYD,QACtBE,EAAWD,EAAYE,OACvBC,EAAe,GAUnB,OATAF,EAASG,QACP,SAACC,GACC,IAAIC,EAAM,GACVP,EAAQK,QAAQ,SAACG,EAAQC,GACvBF,EAAIC,GAAUF,EAAMG,KAEtBL,EAAaM,KAAKH,KAGfH,yCAEOA,GAcZ,MAVW,CAAC,CACRO,KAAM,SACNC,MAAO,wBACPC,KAAM,CAAC,CAAC,MAAO,QAEhB,CACCF,KAAM,OACNC,MAAO,0BACPC,KAAM,CAAC,CAAC,IAAO,0CAKrB,IAAIT,EAAeU,KAAKC,wBACpBC,EAASF,KAAKG,eAAeb,GAEjC,OADAxC,EAAO,OAAaoD,EAElBjE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,0BAECiE,EAAMC,OACPpE,EAAAC,EAAAC,cAACmE,EAAApE,EAAD,CACEqE,WAAYpC,IACZrB,QAASA,YA3CGH,aClCP6D,mLAvBX,OACEvE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACsE,EAAA,EAAD,KACExE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAACuE,EAAD,MACAzE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,4BAEFF,EAAAC,EAAAC,cAACwE,EAAA,EAAD,KACE1E,EAAAC,EAAAC,cAACyE,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAI,IAAOC,UAAWnE,IAEnCX,EAAAC,EAAAC,cAACyE,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAI,WAAcC,UAAW9B,IAC1ChD,EAAAC,EAAAC,cAACyE,EAAA,EAAD,CAAOI,OAAQ,WACb,OAAO/E,EAAAC,EAAAC,cAAA,oCAhBLQ,aCEEsE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECTNC,IAASN,OAAO/E,EAAAC,EAAAC,cAAEoF,EAAF,MAAUC,SAASC,eAAe,SDkH5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d52bfe60.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Nav, NavLink } from 'reactstrap';\n\nclass NavBar extends React.Component {\n  render () {\n    return(\n      <div className='home-container'>\n        <Nav pills>\n          <NavLink tag={Link} to='/'>Home</NavLink>\n          <NavLink tag={Link} to='/example'>Example</NavLink>\n        </Nav>\n      </div>\n  );\n  }\n}\nexport default NavBar;\n","import React, { Component } from 'react';\nimport { Jumbotron, Container } from 'reactstrap';\n// var Link = require('react-router-dom').Link;\n\nclass Home extends Component {\n  render() {\n    return (\n      <div>\n        <Jumbotron>\n          <Container fluid>\n            <p className=\"lead\">Date: 5:30pm Nov. 16 to 10:00am Nov. 19</p>\n            <p className=\"text-muted\">Place: DC3336</p>\n            <p className=\"text-muted\">Submission deadline: 10am on Nov. 19</p>\n            <p className=\"text-muted\">Theme: Portfolio Analysis</p>\n            <p className=\"text-muted\">Food: Pizza will be provided</p>\n            \n            <p className=\"text-muted\">Objectives: In this hackathon, we will develop a frontend application using ReactJS. A stock json file will be provided. The file consists of the one year TSX60 stocks data. Based on the data, pick 5 stocks to build a equally-weighted portfolio. The team with the highest portfolio return in a week wins.</p>\n            <p className=\"text-muted\">Rules:</p>\n            <p className=\"text-muted\">- Each student will clone the starter repository and create a new team branch from the repository.</p>\n            <p className=\"text-muted\">- To submit your code, you need to push your latest code to the team branch before the deadline.</p>\n            <p className=\"text-muted\">- If you commit new changes after the deadline, you will be disqualified from the awards.</p>\n            <p className=\"text-muted\">- Do not modify the data files or anything outside of your team folder!</p>\n            <p className=\"text-muted\">- Make sure all numbers are calculated from the data file. Do not hardcode numbers! We will catch you!</p>\n            <p className=\"text-muted\">- Project should at least include information regarding stock analysis, portfolio return, each group member's profile, and graphs/charts about the portfolio.</p>\n            \n            <p className=\"text-muted\">Reminder: Start looking for your group (team of 4). Don't forget to bring your own laptop and charger</p>\n            <p className=\"text-muted\">Tutorials: Git, ReactJS</p>\n            \n            <p className=\"text-muted\">Judges: CFM mentors, Yi, and Heather</p>\n            <p className=\"text-muted\">Awards: Best coding style, Best web design, Best portfolio</p>\n            \n          </Container>\n        </Jumbotron>\n      </div>\n    )\n  }\n}\nexport default Home;\n","import React, { Component } from 'react';\n// import Players from '../Data/players';\nimport PlayerStats from '../Data/playerStats';\nimport Teams from '../Data/teams';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\n\nvar options = {\n  chart: {\n    type: 'scatter',\n    zoomType: 'xy'\n  },\n  title: {\n    text: 'NBA Player\\'s Score Breakdown'\n  },\n  subtitle: {\n    text: 'Source: Heinz  2003'\n  },\n  xAxis: {\n    title: {\n        enabled: true,\n        text: 'Height (cm)'\n    },\n    startOnTick: true,\n    endOnTick: true,\n    showLastLabel: true\n  },\n  yAxis: {\n      title: {\n          text: 'Weight (kg)'\n      }\n  },\n  legend: {\n    layout: 'vertical',\n    align: 'left',\n    verticalAlign: 'top',\n    x: 100,\n    y: 70,\n    floating: true,\n    backgroundColor: (Highcharts.theme && Highcharts.theme.legendBackgroundColor) || '#FFFFFF',\n    borderWidth: 1\n},\nplotOptions: {\n    scatter: {\n        marker: {\n            radius: 5,\n            states: {\n                hover: {\n                    enabled: true,\n                    lineColor: 'rgb(100,100,100)'\n                }\n            }\n        },\n        states: {\n            hover: {\n                marker: {\n                    enabled: false\n                }\n            }\n        },\n        tooltip: {\n            headerFormat: '<b>{series.name}</b><br>',\n            pointFormat: '{point.x} cm, {point.y} kg'\n        }\n    }\n  },\n}\n\nclass Example extends Component {\n  convertPlayerStatJSON () {\n    var headers = PlayerStats.headers;\n    var statsArr = PlayerStats.rowSet;\n    var statsJSONArr = [];\n    statsArr.forEach(\n      (entry) => {\n        var obj = {};\n        headers.forEach((header, index) =>{\n          obj[header] = entry[index];\n        })\n        statsJSONArr.push(obj);\n      }\n    )\n    return statsJSONArr;\n  }\n  generateSeries (statsJSONArr) {\n    // var stat = statsJSONArr[0];\n    // var makeup = {};\n    // var playerSeries = [];\n    var series = [{\n          name: 'Female',\n          color: 'rgba(223, 83, 83, .5)',\n          data: [[163.8, 67.3]]\n\n      }, {\n          name: 'Male',\n          color: 'rgba(119, 152, 191, .5)',\n          data: [[174.0, 65.6]]\n      }]\n      return series;\n  }\n  render() {\n    var statsJSONArr = this.convertPlayerStatJSON();\n    var series = this.generateSeries(statsJSONArr);\n    options['series'] = series;\n    return (\n      <div className='home-container'>\n        <h2>Example: NBA</h2>\n        {/* <p>{Players.length}</p> */}\n        {Teams.length}\n        <HighchartsReact\n          highcharts={Highcharts}\n          options={options}\n        />\n      </div>\n    )\n  }\n}\nexport default Example;\n","import React, { Component } from 'react';\nimport {HashRouter, Route, Switch} from 'react-router-dom';\n// import logo from './logo.svg';\nimport './App.css';\nimport Nav from './Components/Nav';\nimport Home from './Page/Home';\n// import About from './Page/About';\nimport Example from './Page/Example';\nclass App extends Component {\n  render() {\n\n    return (\n      <div className=\"App\">\n        <HashRouter>\n          <div className='home-container'>\n            <Nav />\n            <div className='home-container'>\n              <h1>CFM Hackathon</h1>\n            </div>\n            <Switch>\n              <Route exact path={`/`} component={Home} />\n              {/* <Route exact path='/about' component={About} /> */}\n              <Route exact path={`/example`} component={Example} />\n              <Route render={function () {\n                return <p>Not Found</p>\n              }} />\n            </Switch>\n          </div>\n        </HashRouter>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(< App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}